#+TITLE:  面试要点
#+AUTHOR:  ruancongyong

*  redis部分
+ Redis的应用场景
+ Redis支持的数据类型（必考）
+ zset跳表的数据结构（必考）
+ Redis的数据过期策略（必考）
+ Redis的LRU过期策略的具体实现
+ 如何解决Redis缓存雪崩，缓存穿透问题
+ Redis的持久化机制（必考）
+ Redis的管道pipeline

* mysql部分
+ 事务的基本要素
+ 事务隔离级别
+ 如何解决事务的并发问题(脏读，幻读)？
+ MVCC多版本并发控制？
+ binlog,redolog,undolog都是什么，起什么作用？
+ InnoDB的行锁/表锁？
+ myisam和innodb的区别，什么时候选择myisam？
+ 为什么选择B+树作为索引结构？
+ 索引B+树的叶子节点都可以存哪些东西？
+ 查询在什么时候不走（预期中的）索引？
+ sql如何优化?
+ explain是如何解析sql的？
+ order by原理



*方程式* : E = mc^2  \\

H_2 O

/斜体/ 

git
=git=

+删除线+

_下划线_



#+begin_src go
package main

import (
    "flag"
    "os"
    "path/filepath"

    "iabetor.com/estate/routers"
    "iabetor.com/estate/core/log"
)

func init() {
    var logDir, level string
    logLevel := os.Getenv("LOG_LEVEL")
    if logLevel != "" {
        level = logLevel
    } else {
        level = "info"
    }
    wd, err := os.Getwd()
    if err != nil {
        panic(err.Error())
    }
    if dirname := os.Getenv("LOG_DIR"); dirname != "" {
        logDir = dirname
    } else {
        logDir = filepath.Join(wd, "log")
    }
    filename := filepath.Base(os.Args[0]) + ".log"
    if err = log.Init(level, filepath.Join(logDir, filename)); err != nil {
        panic(err.Error())
    }
}

func main() {
    mode := flag.String("mode", "release", "the run mode")
    flag.Parse()
    r := routers.InitRouter(*mode)
    r.Run() // 在 0.0.0.0:8080
}
#+end_src
